phyla <- read.tree(text="(t1:4.5,t2:1.5,t3:0.5,t4:2,t5:2.5);")
plot(phyla)
seed <- 123
ngenes <- 6000
nregions <- 18000
ncells_total <- 7000
library("devtools")
library("ape")
phyla <- read.tree(text="(t1:4.5,t2:1.5,t3:0.5,t4:2,t5:2.5);")
load_all("../")
tmp <- read.table("../../PoissonBeta/result.txt")
dim(tmp)
View(tmp)
data(param_realdata.zeisel.imputed)
View(match_params)
tmp <- read.table("../../PoissonBeta/result.txt", header = T
)
tmp <- tmp[,c(1,2,3,4)]
View(match_params)
View(tmp)
tmp <- tmp[,c(12,3,4)]
tmp <- tmp[,c(2,3,4)]
tmp <- tmp[,c(2,3,1)]
View(tmp)
View(match_params)
colnames(tmp) <- colnames(match_params)
save(match_params, file="../data/protein_sim.rda")
save(match_params, file="../data/protein_sim.RData")
data(protein_sim)
dim(match_params)
rm(match_params)
data(protein_sim)
dim(match_params)
tmp <- read.table("../../PoissonBeta/result.txt", header = T)
tmp <- tmp[,c(2,3,4)]
tmp <- tmp[,c(2,3,1)]
colnames(tmp) <- colnames(match_params)
match_params <- tmp
save(match_params, file="../data/protein_sim.RData")
data(protein_sim)
library("devtools")
library("ape")
phyla <- read.tree(text="(t1:4.5,t2:1.5,t3:0.5,t4:2,t5:2.5);")
plot(phyla)
seed <- 123
ngenes <- 6000
nregions <- 18000
ncells_total <- 7000
load_all("../")
true_ADTcounts_res <- SimulateTrueCounts(ncells_total=ncells_total,
min_popsize=50,
i_minpop=1,
ngenes=1000,
nevf=10,
evf_type="discrete",
n_de_evf=6,
vary="s",
Sigma=0.3,
phyla=phyla,
param_realdata="protein_sim"
randseed=seed)
true_ADTcounts_res <- SimulateTrueCounts(ncells_total=ncells_total,
min_popsize=50,
i_minpop=1,
ngenes=1000,
nevf=10,
evf_type="discrete",
n_de_evf=6,
vary="s",
Sigma=0.3,
phyla=phyla,
param_realdata="protein_sim",
randseed=seed)
load("../NewSym_med_gene_len.rda")
observed_ADTcounts <- True2ObservedCounts(true_counts=true_ADTcounts_res[[1]],
meta_cell=true_ADTcounts_res[[3]],
protocol="UMI",
alpha_mean=0.045,
alpha_sd=0.01,
gene_len=gene_len,
depth_mean=50000,
depth_sd=3000,
)
counts2 <- observed_ADTcounts[[1]]
#filter
rownames(counts2) <- paste("G",1:nrow(counts2),sep = "")
colnames(counts2) <- paste("C",1:ncol(counts2),sep = "")
pbmc <- CreateSeuratObject(counts = counts2, project = "P2", min.cells = 0, min.features = 0)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize")
library(Seurat)
pbmc <- CreateSeuratObject(counts = counts2, project = "P2", min.cells = 0, min.features = 0)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize")
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 200)
counts2 <- counts2[pbmc@assays[["RNA"]]@var.features,]
write.table(counts2, sprintf("%s/NewSym_med_Protein.txt", datapath), quote=F, row.names = F, col.names = F, sep = "\t")
datapath <- sprintf("../../Symsim2/seed_%d", seed)
write.table(counts2, sprintf("%s/NewSym_med_Protein.txt", datapath), quote=F, row.names = F, col.names = F, sep = "\t")
library("devtools")
library("ape")
phyla <- read.tree(text="(t1:4.5,t2:1.5,t3:0.5,t4:2,t5:2.5);")
plot(phyla)
seed <- 123
ngenes <- 6000
nregions <- 18000
ncells_total <- 7000
load_all("../")
true_ADTcounts_res <- SimulateTrueCounts(ncells_total=ncells_total,
min_popsize=50,
i_minpop=1,
ngenes=1000,
nevf=10,
evf_type="discrete",
n_de_evf=6,
vary="s",
Sigma=0.3,
phyla=phyla,
param_realdata="protein_sim",
randseed=seed)
load("../NewSym_med_gene_len.rda")
observed_ADTcounts <- True2ObservedCounts(true_counts=true_ADTcounts_res[[1]],
meta_cell=true_ADTcounts_res[[3]],
protocol="UMI",
alpha_mean=0.045,
alpha_sd=0.01,
gene_len=gene_len,
depth_mean=50000,
depth_sd=3000,
)
#filter
rownames(counts2) <- paste("G",1:nrow(counts2),sep = "")
counts2 <- observed_ADTcounts[[1]]
#filter
rownames(counts2) <- paste("G",1:nrow(counts2),sep = "")
colnames(counts2) <- paste("C",1:ncol(counts2),sep = "")
pbmc <- CreateSeuratObject(counts = counts2, project = "P2", min.cells = 0, min.features = 0)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize")
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 200)
library(Seurat)
pbmc <- CreateSeuratObject(counts = counts2, project = "P2", min.cells = 0, min.features = 0)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize")
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 200)
counts2 <- counts2[pbmc@assays[["RNA"]]@var.features,]
datapath <- sprintf("../../Symsim2/seed_%d", seed)
write.table(counts2, sprintf("%s/NewSym_med_Protein.txt", datapath), quote=F, row.names = F, col.names = F, sep = "\t")
rm(list = ls())
library("devtools")
library("ape")
phyla <- read.tree(text="(t1:4.5,t2:1.5,t3:0.5,t4:2,t5:2.5);")
plot(phyla)
seed <- 123
ngenes <- 6000
nregions <- 18000
ncells_total <- 5000
true_ADTcounts_res <- SimulateTrueCounts(ncells_total=ncells_total,
min_popsize=50,
i_minpop=1,
ngenes=1000,
nevf=10,
evf_type="discrete",
n_de_evf=6,
vary="s",
Sigma=0.3,
phyla=phyla,
param_realdata="protein_sim",
randseed=seed)
load("../NewSym_med_gene_len.rda")
observed_ADTcounts <- True2ObservedCounts(true_counts=true_ADTcounts_res[[1]],
meta_cell=true_ADTcounts_res[[3]],
protocol="UMI",
alpha_mean=0.045,
alpha_sd=0.01,
gene_len=gene_len,
depth_mean=50000,
depth_sd=3000,
)
counts2 <- observed_ADTcounts[[1]]
#filter
rownames(counts2) <- paste("G",1:nrow(counts2),sep = "")
colnames(counts2) <- paste("C",1:ncol(counts2),sep = "")
library(Seurat)
pbmc <- CreateSeuratObject(counts = counts2, project = "P2", min.cells = 0, min.features = 0)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize")
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 200)
counts2 <- counts2[pbmc@assays[["RNA"]]@var.features,]
datapath <- sprintf("../../Symsim2/seed_%d", seed)
write.table(counts2, sprintf("%s/NewSym_med_Protein.txt", datapath), quote=F, row.names = F, col.names = F, sep = "\t")
phyla <- read.tree(text="(t1:4.5,t2:1.5,t3:0.5,t4:2,t5:2.5,t6:9,t7:6.5,t8:6);")
library("devtools")
library("ape")
plot(phyla)
seed <- 123
phyla <- read.tree(text="(t1:4.5,t2:1.5,t3:0.5,t4:2,t5:2.5,t6:9,t7:6.5,t8:6);")
seed <- 123
seed <- 123
ngenes <- 8000
nregions <- 20000
ncells_total <- 8000
load_all("../")
true_ADTcounts_res <- SimulateTrueCounts(ncells_total=ncells_total,
min_popsize=50,
i_minpop=1,
ngenes=1250,
nevf=10,
evf_type="discrete",
n_de_evf=6,
vary="s",
Sigma=0.3,
phyla=phyla,
param_realdata="protein_sim",
randseed=seed)
load("../NewSym_med_gene_len2.rda")
observed_ADTcounts <- True2ObservedCounts(true_counts=true_ADTcounts_res[[1]],
meta_cell=true_ADTcounts_res[[3]],
protocol="UMI",
alpha_mean=0.045,
alpha_sd=0.01,
gene_len=gene_len,
depth_mean=50000,
depth_sd=3000,
)
counts1 <- batch_RNAcounts[[1]]
counts2 <- observed_ADTcounts[[1]]
#filter
rownames(counts2) <- paste("G",1:nrow(counts2),sep = "")
colnames(counts2) <- paste("C",1:ncol(counts2),sep = "")
library(Seurat)
pbmc <- CreateSeuratObject(counts = counts2, project = "P2", min.cells = 0, min.features = 0)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize")
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 250)
counts2 <- counts2[pbmc@assays[["RNA"]]@var.features,]
datapath <- sprintf("../../Symsim2/seed_%d", seed)
write.table(counts2, sprintf("%s/NewSym_med_Protein2.txt", datapath), quote=F, row.names = F, col.names = F, sep = "\t")
library("devtools")
library("ape")
phyla <- read.tree(text="(t1:4.5,t2:1.5,t3:0.5,t4:2,t5:2.5,t6:9,t7:6.5,t8:6,t9:6,t10:7.5,t11:10,t12:11);")
plot(phyla)
seed <- 123
ngenes <- 10000
nregions <- 22000
ncells_total <- 10000
load_all("../")
true_ADTcounts_res <- SimulateTrueCounts(ncells_total=ncells_total,
min_popsize=50,
i_minpop=1,
ngenes=1500,
nevf=10,
evf_type="discrete",
n_de_evf=6,
vary="s",
Sigma=0.3,
phyla=phyla,
param_realdata="protein_sim",
randseed=seed)
load("../NewSym_med_gene_len2.rda")
load("../NewSym_med_gene_len3.rda")
observed_ADTcounts <- True2ObservedCounts(true_counts=true_ADTcounts_res[[1]],
meta_cell=true_ADTcounts_res[[3]],
protocol="UMI",
alpha_mean=0.045,
alpha_sd=0.01,
gene_len=gene_len,
depth_mean=50000,
depth_sd=3000,
)
counts2 <- observed_ADTcounts[[1]]
#filter
rownames(counts2) <- paste("G",1:nrow(counts2),sep = "")
colnames(counts2) <- paste("C",1:ncol(counts2),sep = "")
library(Seurat)
pbmc <- CreateSeuratObject(counts = counts2, project = "P2", min.cells = 0, min.features = 0)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize")
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 300)
counts2 <- counts2[pbmc@assays[["RNA"]]@var.features,]
datapath <- sprintf("../../Symsim2/seed_%d", seed)
write.table(counts2, sprintf("%s/NewSym_med_Protein3.txt", datapath), quote=F, row.names = F, col.names = F, sep = "\t")
library("devtools")
library("ape")
phyla <- read.tree(text="(t1:4.5,t2:1.5,t3:0.5,t4:2,t5:2.5,t6:9,t7:6.5,t8:6);")
plot(phyla)
seed <- 123
ngenes <- 8000
nregions <- 20000
ncells_total <- 8000
load_all("../")
true_ADTcounts_res <- SimulateTrueCounts(ncells_total=ncells_total,
min_popsize=50,
i_minpop=1,
ngenes=1250,
nevf=10,
evf_type="discrete",
n_de_evf=6,
vary="s",
Sigma=0.3,
phyla=phyla,
param_realdata="protein_sim",
randseed=seed)
load("../NewSym_med_gene_len2_2.rda")
datapath <- sprintf("../../Symsim2/seed_%d", seed)
datapath
write.table(counts2, sprintf("%s/NewSym_med_Protein3_2.txt", datapath), quote=F, row.names = F, col.names = F, sep = "\t")
datapath <- sprintf("../../Symsim2/seed_%d", seed)
write.table(counts2, sprintf("%s/NewSym_med_Protein2_2.txt", datapath), quote=F, row.names = F, col.names = F, sep = "\t")
setwd("e://软件/program/others/liwei/SymSim/SymSimProtein/")
load("../NewSym_med_gene_len2_2.rda")
observed_ADTcounts <- True2ObservedCounts(true_counts=true_ADTcounts_res[[1]],
meta_cell=true_ADTcounts_res[[3]],
protocol="UMI",
alpha_mean=0.035,
alpha_sd=0.01,
gene_len=gene_len,
depth_mean=50000,
depth_sd=3000,
)
counts2 <- observed_ADTcounts[[1]]
#filter
rownames(counts2) <- paste("G",1:nrow(counts2),sep = "")
colnames(counts2) <- paste("C",1:ncol(counts2),sep = "")
library(Seurat)
pbmc <- CreateSeuratObject(counts = counts2, project = "P2", min.cells = 0, min.features = 0)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize")
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 250)
counts2 <- counts2[pbmc@assays[["RNA"]]@var.features,]
datapath <- sprintf("../../Symsim2/seed_%d", seed)
write.table(counts2, sprintf("%s/NewSym_med_Protein2_2.txt", datapath), quote=F, row.names = F, col.names = F, sep = "\t")
library("devtools")
library("ape")
phyla <- read.tree(text="(t1:4.5,t2:1.5,t3:0.5,t4:2,t5:2.5,t6:9,t7:6.5,t8:6,t9:6,t10:7.5,t11:10,t12:11);")
plot(phyla)
seed <- 123
ngenes <- 10000
nregions <- 22000
ncells_total <- 10000
load_all("../")
true_ADTcounts_res <- SimulateTrueCounts(ncells_total=ncells_total,
min_popsize=50,
i_minpop=1,
ngenes=1500,
nevf=10,
evf_type="discrete",
n_de_evf=6,
vary="s",
Sigma=0.3,
phyla=phyla,
param_realdata="protein_sim",
randseed=seed)
load("../NewSym_med_gene_len3_2.rda")
observed_ADTcounts <- True2ObservedCounts(true_counts=true_ADTcounts_res[[1]],
meta_cell=true_ADTcounts_res[[3]],
protocol="UMI",
alpha_mean=0.025,
alpha_sd=0.01,
gene_len=gene_len,
depth_mean=50000,
depth_sd=3000,
)
# batch_ADTcounts <- DivideBatches2(observed_ADTcounts, batchIDs, batch_effect_size = 1)
# print((sum(batch_ADTcounts$counts==0)-sum(true_ADTcounts_res$counts==0))/sum(true_ADTcounts_res$counts>0))
# print(sum(batch_ADTcounts$counts==0)/prod(dim(batch_ADTcounts$counts)))
counts2 <- observed_ADTcounts[[1]]
#filter
rownames(counts2) <- paste("G",1:nrow(counts2),sep = "")
colnames(counts2) <- paste("C",1:ncol(counts2),sep = "")
library(Seurat)
pbmc <- CreateSeuratObject(counts = counts2, project = "P2", min.cells = 0, min.features = 0)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize")
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 300)
counts2 <- counts2[pbmc@assays[["RNA"]]@var.features,]
datapath <- sprintf("../../Symsim2/seed_%d", seed)
write.table(counts2, sprintf("%s/NewSym_med_Protein3_2.txt", datapath), quote=F, row.names = F, col.names = F, sep = "\t")
